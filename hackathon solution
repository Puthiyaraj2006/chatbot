import cv2
import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from collections import Counter

def get_dominant_colors(image_path, k=5):
    # Load image and convert to RGB
    image = cv2.imread(image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    
    # Reshape the image to be a list of pixels
    pixels = image.reshape(-1, 3)
    
    # Cluster the pixels and find dominant colors
    kmeans = KMeans(n_clusters=k)
    kmeans.fit(pixels)
    
    # Get the colors and their counts
    counts = Counter(kmeans.labels_)
    total_pixels = sum(counts.values())
    
    # Sort colors by frequency
    sorted_colors = sorted(counts.items(), key=lambda x: x[1], reverse=True)
    
    # Get RGB values of cluster centers
    colors = kmeans.cluster_centers_.astype(int)
    
    # Display results
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.imshow(image)
    plt.title('Original Image')
    plt.axis('off')
    
    plt.subplot(1, 2, 2)
    for i, (cluster, count) in enumerate(sorted_colors):
        color = colors[cluster]
        percentage = (count / total_pixels) * 100
        plt.bar(i, percentage, color=[x/255 for x in color])
        print(f"Color {i+1}: RGB {color} - {percentage:.2f}%")
    
    plt.title('Dominant Colors')
    plt.xlabel('Color')
    plt.ylabel('Percentage (%)')
    plt.xticks([])
    plt.show()

# Example usage
get_dominant_colors('your_image.jpg', k=5)
